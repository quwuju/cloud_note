@Transactional
public void shareNote(...){}
//等价于下面执行流程
try{
//调txManager.开启事务
ShareService.shareNote();
//调txManager.提交操作
}catch(){
//调txManager.回滚操作
}
##@Transactional标记属性(控制事务属性)
###可读写特性readOnly
默认可读可写;如果遇到只有select操作的方法
可以采用只读事务。使用格式：
@Transactional(readOnly=true)
###回滚特性rollbackFor
默认RuntimeException回滚,其他异常不回滚。

@Transactional
public void f1(){
  //db操作
  //发生了IOException
}
默认使用：db操作无法撤销,如果需要撤销
需要使用@Transactional(rollbackFor=IOException.class)

###传播特性propagation
一般采用默认传播类型，类型为REQUIRED。
@Transactional//开启一个事务
public void f1(){
  //业务代码A
  f2();
  //业务代码B
}

@Transactional//使用前面的事务
public void f2(){
  //业务代码C//默认C出错会影响f1的A
}
###隔离特性isolation
一般采用默认隔离级别,级别为READ_COMMITED
产生原因是因为：事务的并发,
 （两段数据库操作代码并发，容易产生脏读,
幻读,更新丢失等问题）。
解决方案就是采用隔离级别设置，将两个事务
操作代码隔离开。
@Transactional标记事务隔离级别有以下几种：
-READ_UNCOMMITTED 读未提交（级别最低）
-READ_COMMITTED 读已提交
-REPEATABLE_READ 可重复读
-SERIALIZABLE 序列化操作（级别最高）
-DEFAULT 根据数据库自动选择READ_COMMITTED
 或REPEATABLE_READ
级别越高安全性越好,但是并发处理能力越低

一般使用时,选择默认DEFAULT,之后如果有
安全性需求,会由程序员编写代码逻辑解决。
（悲观锁和乐观锁）


#Spring AOP
##AOP概念
Aspect Oriented Programming (AOP)
面向切面编程（重点：共同业务处理,
优点：可以在不用修改原有组件逻辑代码情况下,
通过配置追加新的处理功能）
Object Oriented Programming (OOP)
面向对象编程(重点：对象分析和设计)

项目涉及AOP应用：a.追加事务控制;
b.追加异常日志记录

##AOP入门示例(掌握用注解实现)
-将共同处理封装成一个组件
-追加AOP配置,将共同组件作用到目标方法上
要求：在每个controller方法执行前输出打桩信息

##扩展练习(掌握用注解实现)
要求：在每个Service方法执行前输出打桩信息

##AOP相关概念
 OOP:类,对象,继承,多态
 AOP:切面,切入点,通知,动态代理
###切面（Aspect）
 指的是封装了共同处理的组件,并且能够
切入到其他目标组件方法上。
(带有@Aspect标记的Bean组件)
###切入点（Pointcut）
 用于指定目标组件及方法。Spring提供了
几种切入点表达式
-方法限定表达式
 可以指定某个组件中部分方法追加共同功能
execution(修饰符? 返回类型 方法名(参数) 抛出异常?)
//匹配所有add打头的方法
execution(* add*(..))
//匹配UserService组件中所有方法
execution(* com.service.UserService.*(..))
//匹配com.service下所有类所有方法
execution(* com.service.*.*(..))
//匹配com.service包及子包下所有类所有方法
execution(* com.service..*.*(..))

-类型限定表达式
 可以指定某个组件中所有方法追加共同功能
 within(类型)
 //匹配UserService组件所有方法
 within(com.service.UserService)
 //匹配com.service包下所有类所有方法
 within(com.service.*)
 //匹配com.service包及子包下所有类所有方法
 within(com.service..*)

-bean名称限定表达式
 可以指定某个组件中所有方法追加共同功能
 bean(id名)
//匹配id=userService的组件所有方法
 bean(userService)
//匹配所有id名已Service结尾的组件所有方法
 bean(*Service)


###通知(Advice)
 用于指定切入的时机。
 指定切面功能在什么时机
 插入到目标组件方法中。
 Spring提供以下5种通知类型

try{
 -使用前置通知<aop:before>
 //执行目标组件方法（Service方法）
 -使用后置通知<aop:after-returning>
}catch(){
 -使用异常通知<aop:after-throwing>
}finally{
 -使用最终通知<aop:after>
}

环绕通知=前置+后置。

切面：追加啥功能？ 打桩信息
切入点：切谁？ 所有Controller
通知：啥时候切？前置通知

###什么是Spring AOP？实现原理？
面向切面编程，目的是将共同业务从传统
业务中抽离出来,单独封装,然后以配置方式
进行关联。优点：实现了共同业务和传统业务
的解耦，使程序员将精力放在传统的业务编写上。

Spring AOP实现原理采用的是动态代理技术。
动态代理技术：可以动态创建类的技术。
当Spring采用AOP切入后,Spring容器给使用者
返回的是采用动态代理技术生成的一个新类型,
新类型重写了原有目标组件的方法,在重写方法
中调用切入的功能和原有目标组件功能。
-------------------------------
public class $Proxy28 implements UserService{
   public void checkLogin(){
     //调用事务处理
     //调用UserServiceImpl.checkLogin处理
   }
}

Spring底层有两种动态技术应用,分别为
a.采用JDK java.reflect.Proxy API（接口）
 可以根据指定接口生成代理类。
 public class 代理类 implements 目标接口{
   //重写接口方法
 }
b.采用CGLIB包（无接口）
 可以根据指定的类生成代理类。
 public class 代理类 extends 目标类{
   //重写父类方法
 }

##案例2：为云笔记项目追加异常处理
要求：当Controller,Service,Dao处理发生异常
将异常信息写入文件中。（采用AOP处理）
-切面：将异常信息写入文件
FileWriter-->PrintWriter
-切入点：为所有Controller组件方法追加
within(com.tedu.cloudnote.controller..*)
-通知：发生异常之后执行，采用异常通知
  @AfterThrowing


#项目评审要求
##PPT介绍
-个人介绍（简介）
-项目简介（做了什么项目,主要包含哪些功能）
 图（系统功能结构图+用例图）+文字
-使用的技术（涉及技术和作用）
 图（系统架构图）+文字
-项目整体流程和结构（图）
-讲解一个典型功能（自己选）
 图（时序图）+文字描述
-开发中遇到的问题和解决方案
 文字描述
-项目收获
 文件描述
##项目运行版本（演示完成的项目功能）



